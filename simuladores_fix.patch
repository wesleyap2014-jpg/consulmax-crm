*** a/src/pages/Simuladores.tsx
--- b/src/pages/Simuladores.tsx
@@
 import { Loader2, Plus, Pencil, Trash2, X } from "lucide-react";
 
 // ===== PDF =====
 import jsPDF from "jspdf";
 import autoTable from "jspdf-autotable";
 
@@
 type FormaContratacao = "Parcela Cheia" | "Reduzida 25%" | "Reduzida 50%";
 
 /* ======================= Helpers ========================= */
 const brMoney = (v: number) =>
   v.toLocaleString("pt-BR", { style: "currency", currency: "BRL", maximumFractionDigits: 2 });
 
@@
   return s || "";
 }
 
 /* ======================= Cálculo ========================= */
 type CalcInput = {
   credito: number;
@@
   evento?: string;
 };
 
-/* ========================= Página ======================== */
-export default function Simuladores() {
+/* ========================= Página ======================== */
+export default function Simuladores() {
@@
-  // ÍNDICES (chips + overlay manual)
+  // ÍNDICES (chips + overlay manual)
   const [indiceSel, setIndiceSel] = useState<"IPCA" | "INCC" | "IGP-M">("IPCA");
   const [overlayIndices, setOverlayIndices] = useState(false);
-  const [ipca12, setIpca12] = useState<number>(0.039); // padrão 3,90%
-  const [incc12, setIncc12] = useState<number>(0.039);
-  const [igpm12, setIgpm12] = useState<number>(0.039);
+  const [ipca12, setIpca12] = useState<number>(0.039); // default, substituído pelo banco
+  const [incc12, setIncc12] = useState<number>(0.039);
+  const [igpm12, setIgpm12] = useState<number>(0.039);
 
   // usuário logado (public.users)
-  const [userName, setUserName] = useState<string>("");
-  const [userPhone, setUserPhone] = useState<string>("");
+  const [userName, setUserName] = useState<string>("");
+  const [userPhone, setUserPhone] = useState<string>("");
+
+  // --- ADD: auxiliares globais ---
+  const [indexAccumPct, setIndexAccumPct] = useState<number>(0); // 12m do índice da tabela (ex.: 0.0513)
+  const [extratoOpen, setExtratoOpen] = useState<boolean>(false); // chip expandir/ocultar extrato
+  const [logoUrl, setLogoUrl] = useState<string | null>(null);    // logo como dataURL p/ tela+PDF
 
   const [calc, setCalc] = useState<ReturnType<typeof calcularSimulacaoComExtrato> | null>(null);
   const [salvando, setSalvando] = useState(false);
   const [simCode, setSimCode] = useState<number | null>(null);
@@
   }, []);
 
+  // --- ADD: carregar logo como dataURL (garante render em PDF/print) ---
+  useEffect(() => {
+    (async () => {
+      try {
+        const path =
+          (import.meta as any)?.env?.BASE_URL
+            ? `${(import.meta as any).env.BASE_URL}logo-consulmax.png`
+            : "/logo-consulmax.png";
+        const resp = await fetch(path);
+        const blob = await resp.blob();
+        const fr = new FileReader();
+        fr.onload = () => setLogoUrl(fr.result as string);
+        fr.readAsDataURL(blob);
+      } catch {
+        setLogoUrl(null);
+      }
+    })();
+  }, []);
+
+  // --- ADD: buscar acumulado 12m no banco ao trocar de tabela/índice e persistir no estado do índice selecionado ---
+  useEffect(() => {
+    (async () => {
+      const code =
+        (tabelaSelecionada?.indice_correcao?.[0] as any) ||
+        (tabelaSelecionada?.indice_correcao as any) ||
+        null;
+      if (!code) {
+        setIndexAccumPct(0);
+        return;
+      }
+      try {
+        const ref = new Date();
+        const refISO = new Date(ref.getFullYear(), ref.getMonth(), 1).toISOString().slice(0, 10);
+        const { data, error } = await supabase.rpc("sim_index_12m_value", {
+          _code: String(code),
+          _ref_month: refISO,
+        });
+        if (!error && typeof data === "number") {
+          setIndexAccumPct(data); // exemplo 0.0513 = 5,13%
+          // Persistir no índice ativo para não “voltar 3,90%”
+          if (indiceSel === "IPCA") setIpca12(data);
+          if (indiceSel === "INCC") setIncc12(data);
+          if (indiceSel === "IGP-M") setIgpm12(data);
+        }
+      } catch {
+        // mantém valor atual
+      }
+    })();
+    // eslint-disable-next-line react-hooks/exhaustive-deps
+  }, [tabelaSelecionada?.id, tabelaSelecionada?.indice_correcao, indiceSel]);
+
   useEffect(() => {
     const found = leads.find((x) => x.id === leadId);
     setLeadInfo(found ? { nome: found.nome, telefone: found.telefone } : null);
   }, [leadId, leads]);
@@
   const indice12m = useMemo(() => {
     if (indiceSel === "IPCA") return ipca12;
     if (indiceSel === "INCC") return incc12;
     return igpm12;
   }, [indiceSel, ipca12, incc12, igpm12]);
@@
     setCalc(calcularSimulacaoComExtrato(inp));
   }, [
     tabelaSelecionada,
     credito,
     prazoVenda,
     forma,
     seguroPrest,
     lanceOfertPct,
     lanceEmbutPctValid,
     parcContemplacao,
-    indice12m,
+    indice12m,
   ]); // eslint-disable-line
 
@@
   const propostaTexto = useMemo(() => {
@@
   }, [calc, podeCalcular, segmento, tabelaSelecionada, grupo, assembleia, userPhone, indiceSel, indice12m]);
 
   async function copiarProposta() {
@@
   const activeAdmin = admins.find((a) => a.id === activeAdminId);
 
   return (
     <div className="p-6 space-y-4">
       {/* topo: admins + botões */}
@@
           {activeAdmin && (
             <>
               <Button
                 variant="secondary"
                 size="sm"
                 onClick={() => setMgrOpen(true)}
                 className="h-10 rounded-2xl px-4"
               >
                 Gerenciar Tabelas
               </Button>
               <Button
                 variant="secondary"
                 size="sm"
                 onClick={() => alert("Em breve: adicionar administradora.")}
                 className="h-10 rounded-2xl px-4 whitespace-nowrap"
               >
                 <Plus className="h-4 w-4 mr-1" /> + Add Administradora
               </Button>
             </>
           )}
         </div>
       </div>
 
+      {/* Chip de extrato ao vivo */}
+      <div className="mt-4">
+        <div className="flex items-center gap-2">
+          <Button
+            variant="secondary"
+            size="sm"
+            className="rounded-full px-3"
+            onClick={() => setExtratoOpen((v) => !v)}
+          >
+            {extratoOpen ? "Ocultar extrato" : "Expandir extrato"}
+          </Button>
+        </div>
+      </div>
+
@@
               ) : (
                 <div className="text-sm text-muted-foreground">Nenhuma administradora encontrada.</div>
               )}
             </CardContent>
           </Card>
 
           {/* Ações principais */}
           <div className="mt-4 flex flex-wrap items-center gap-3">
             <Button disabled={!calc || salvando} onClick={salvarSimulacao} className="h-10 rounded-2xl px-4">
               {salvando && <Loader2 className="h-4 w-4 mr-2 animate-spin" />}
               Salvar Simulação
             </Button>
             {simCode && <span className="text-sm">✅ Salvo como <strong>Simulação #{simCode}</strong></span>}
           </div>
 
+          {/* Extrato detalhado (visualização rápida) */}
+          {extratoOpen && (
+            <Card className="mt-3">
+              <CardHeader>
+                <CardTitle>Extrato detalhado (visualização rápida)</CardTitle>
+              </CardHeader>
+              <CardContent>
+                <div
+                  className="prose max-w-none"
+                  dangerouslySetInnerHTML={{ __html: ExtratoHTML() }}
+                />
+              </CardContent>
+            </Card>
+          )}
         </div>
@@
       </div>
     </div>
   );
 }
 
 /* ======================= Componentes / Subpáginas ======================= */
@@
 function calcularSimulacaoComExtrato(i: CalcInput) {
-  // ... implementação antiga ...
+  const {
+    credito: C0,
+    prazoVenda,
+    forma,
+    seguro,
+    segmento,
+    taxaAdmFull,
+    frPct,
+    antecipPct,
+    antecipParcelas,
+    limitadorPct,
+    seguroPrestPct,
+    parcContemplacao,
+    indice12m,
+    lanceOfertPct,
+    lanceEmbutPct,
+  } = i;
+
+  const prazo = Math.max(1, Math.floor(prazoVenda));
+  const mCont = clamp(Math.floor(parcContemplacao), 1, prazo);
+
+  const admValor = C0 * taxaAdmFull;
+  const frValor = C0 * frPct;
+  let saldo = C0 + admValor + frValor;
+  const seguroMensal = seguro ? (C0 + admValor + frValor) * seguroPrestPct : 0;
+  const fatorForma = forma === "Parcela Cheia" ? 1 : forma === "Reduzida 25%" ? 0.75 : 0.5;
+  const TA_efetiva = Math.max(0, taxaAdmFull - antecipPct);
+  const parcelaPreSemSeguro = (C0 * fatorForma + C0 * TA_efetiva + C0 * frPct) / prazo;
+  const antecada = antecipParcelas > 0 ? (C0 * antecipPct) / antecipParcelas : 0;
+
+  let creditoCorrigido = C0;
+  const extrato: ExtratoLinha[] = [];
+  let investAc = 0;
+
+  // PRÉ-CONTEMPLAÇÃO
+  for (let m = 1; m <= mCont; m++) {
+    let reajuste = 0;
+    if (m > 1 && (m - 1) % 12 === 0) {
+      const acresc = creditoCorrigido * indice12m;
+      creditoCorrigido += acresc;
+      saldo += acresc; // regra: reajuste pré incide no crédito e aumenta saldo
+      reajuste = acresc;
+    }
+    const temAntecip = m <= antecipParcelas && antecada > 0;
+    const parcelaExib = parcelaPreSemSeguro + (temAntecip ? antecada : 0) + seguroMensal;
+    const abateSaldo = parcelaPreSemSeguro + (temAntecip ? antecada : 0);
+    saldo = Math.max(0, saldo - abateSaldo);
+    investAc += parcelaExib;
+    extrato.push({
+      parcela: m,
+      creditoMes: creditoCorrigido,
+      valorPago: parcelaExib,
+      reajuste,
+      saldoDevedor: saldo,
+      investimento: investAc,
+      evento: reajuste ? "Reajuste pré-contemplação" : undefined,
+    });
+  }
+
+  // CONTEMPLAÇÃO (mCont): aplica lances
+  const lanceEmbutido = creditoCorrigido * clamp(lanceEmbutPct, 0, 0.25);
+  const novoCredito = Math.max(0, creditoCorrigido - lanceEmbutido);
+  const lanceOfertado = creditoCorrigido * clamp(lanceOfertPct, 0, 1);
+  saldo = Math.max(0, saldo - lanceOfertado);
+  const idxCont = extrato.findIndex((l) => l.parcela === mCont);
+  if (idxCont >= 0) {
+    const e = extrato[idxCont];
+    extrato[idxCont] = {
+      ...e,
+      evento:
+        (e.evento ? e.evento + " • " : "") +
+        (lanceEmbutido ? "Lance embutido" : "") +
+        (lanceEmbutido && lanceOfertado ? " + " : "") +
+        (lanceOfertado ? "Lance ofertado" : ""),
+    };
+  }
+
+  // POS-CONTEMPLAÇÃO
+  const parcelasPagas = mCont;
+  let prazoRestante = Math.max(1, prazo - parcelasPagas);
+  const parcelaLimitante = resolveLimitadorPct(limitadorPct, segmento, C0) * (novoCredito + admValor + frValor);
+  const novaParcelaSemLimite = saldo / prazoRestante;
+  let parcelaEscolhidaSemSeguro = Math.max(novaParcelaSemLimite, parcelaLimitante);
+
+  // === REGRA ESPECIAL: Serviços (qualquer valor) e Motocicleta ≤ 19.999,99 ===
+  // Não reduz parcela; apenas reduz prazo:
+  // novoPrazo = ceil(saldo_final / parcela_no_momento_da_contemplacao)
+  const segLower = (segmento || "").toLowerCase();
+  const isServ = segLower.includes("serv");
+  const isMotoAte = segLower.includes("moto") && C0 <= 19999.99;
+  if (isServ || isMotoAte) {
+    // parcela no momento da contemplação (SEM seguro) = parcelaEscolhidaSemSeguro
+    const novoPrazo = Math.max(1, Math.ceil(saldo / Math.max(1e-9, parcelaEscolhidaSemSeguro)));
+    prazoRestante = novoPrazo;
+    // manterParcela = true (mantém a parcela; só muda prazo)
+  }
+  const parcelaEscolhidaComSeguro = parcelaEscolhidaSemSeguro + seguroMensal;
+
+  let saldoPos = saldo;
+  for (let m = mCont + 1; m <= mCont + prazoRestante; m++) {
+    let reajuste = 0;
+    if (m > 1 && (m - 1) % 12 === 0) {
+      const acresc = saldoPos * indice12m;
+      saldoPos += acresc;
+      reajuste = acresc; // pós: reajuste incide sobre o SALDO
+    }
+    const abateSaldo = parcelaEscolhidaSemSeguro;
+    saldoPos = Math.max(0, saldoPos - abateSaldo);
+    const parcelaExib = parcelaEscolhidaComSeguro; // com seguro na tela/extrato
+    investAc += parcelaExib;
+    extrato.push({
+      parcela: m,
+      creditoMes: novoCredito,
+      valorPago: parcelaExib,
+      reajuste,
+      saldoDevedor: saldoPos,
+      investimento: investAc,
+      evento: reajuste ? "Reajuste pós-contemplação" : undefined,
+    });
+    if (saldoPos <= 0) break;
+  }
+
+  return {
+    admValor,
+    frValor,
+    creditoCorrigidoFinal: creditoCorrigido,
+    novoCredito,
+    lanceEmbutido,
+    lanceOfertado,
+    TA_efetiva,
+    parcelaPreSemSeguro,
+    antecada,
+    seguroMensal,
+    novaParcelaSemLimite,
+    parcelaLimitante,
+    parcelaEscolhidaSemSeguro,
+    parcelaEscolhidaComSeguro,
+    prazoRestante,
+    saldoFinal: saldoPos,
+    extrato,
+  };
 }
 
@@
   <Card>
     <CardHeader>
       <CardTitle>Plano de Pagamento após a Contemplação</CardTitle>
     </CardHeader>
     <CardContent className="grid gap-3 sm:grid-cols-2">
@@
       <div>
         <Label>Lance Embutido</Label>
         <Input value={p.calc ? brMoney(p.calc.lanceEmbutido) : ""} readOnly />
       </div>
+      {/* ADD: Lance Próprio de volta */}
+      <div>
+        <Label>Lance Próprio</Label>
+        <Input
+          value={p.calc ? brMoney(Math.max(0, p.calc.lanceOfertado - p.calc.lanceEmbutido)) : ""}
+          readOnly
+        />
+      </div>
@@
     </CardContent>
   </Card>
@@
 
+/* ======== Extrato em HTML com cabeçalho 3 colunas + “Dados da Simulação” ======== */
+function ExtratoHTML() {
+  // acessa estados/valores do componente via closure
+  if (!tabelaSelecionada || !calc || !podeCalcular) {
+    return "<div style='padding:24px;font:14px sans-serif'>Sem dados.</div>";
+  }
+  const adminNome = admins.find(a => a.id === activeAdminId)?.name || "—";
+  const seg = tabelaSelecionada.segmento || segmento || "—";
+  const tabelaNome = tabelaSelecionada.nome_tabela || "—";
+  const formaTxt = forma || "—";
+  const indiceTxt = (tabelaSelecionada.indice_correcao?.[0] || tabelaSelecionada.indice_correcao || "—").toString();
+  const indiceHuman = indexAccumPct ? `${(indexAccumPct * 100).toFixed(2)}%` : "0,00%";
+  const creditoHuman = brMoney(credito || 0);
+  const headerLogo = logoUrl
+    ? `<img src="${logoUrl}" alt="Consulmax" style="height:38px;object-fit:contain" />`
+    : `<div style="height:38px"></div>`;
+
+  return `
+  <div style="font-family:Inter,system-ui,-apple-system,Segoe UI,Roboto,Arial,sans-serif;font-size:13px;color:#1f2937;padding:24px;line-height:1.4;">
+    <div style="display:flex;align-items:center;justify-content:space-between;margin-bottom:10px;">
+      <div>${headerLogo}</div>
+      <div style="font-size:18px;font-weight:600;">Extrato de Simulação</div>
+    </div>
+
+    <div style="display:grid;grid-template-columns:1fr 1fr 1fr;gap:12px;border:1px solid #e5e7eb;border-radius:12px;padding:14px;">
+      <div>
+        <div style="text-align:center;font-weight:700;margin-bottom:6px;">CORRETORA</div>
+        <div>Consulmax Consórcios e Investimento</div>
+        <div>CNPJ: 57.942.043/0001-03</div>
+        <div>Telefone: (69) 9 9302-9380</div>
+        <div>Administradora: ${adminNome}</div>
+      </div>
+      <div>
+        <div style="text-align:center;font-weight:700;margin-bottom:6px;">VENDEDOR</div>
+        <div>Nome: ${userName || "—"}</div>
+        <div>Telefone: ${formatPhoneBR(userPhone) || "—"}</div>
+      </div>
+      <div>
+        <div style="text-align:center;font-weight:700;margin-bottom:6px;">CLIENTE</div>
+        <div>Nome: ${leadInfo?.nome || "—"}</div>
+        <div>Telefone: ${formatPhoneBR(leadInfo?.telefone || "") || "—"}</div>
+      </div>
+    </div>
+
+    <div style="text-align:center;font-weight:700;margin:14px 0 8px;">DADOS DA SIMULAÇÃO</div>
+    <div style="display:grid;grid-template-columns:1fr 1fr 1fr;gap:12px;border:1px solid #e5e7eb;border-radius:12px;padding:14px;">
+      <div>Segmento: <strong>${seg}</strong></div>
+      <div>Tabela: <strong>${tabelaNome}</strong></div>
+      <div>Forma: <strong>${formaTxt}</strong></div>
+      <div>Crédito: <strong>${creditoHuman}</strong></div>
+      <div>Prazo: <strong>${String(prazoVenda)} meses</strong></div>
+      <div>Contemplação: <strong>${String(parcContemplacao)}º mês</strong></div>
+      <div style="grid-column:1/-1;">Índice: <strong>${indiceTxt}</strong> (<strong>${indiceHuman} 12m</strong>)</div>
+    </div>
+
+    ${ExtratoTabelaHTML()}
+  </div>
+  `;
+}
+
+// Tabela do extrato com reajustes visíveis (pré: crédito; pós: saldo) e parcela exibida com seguro
+function ExtratoTabelaHTML() {
+  if (!calc || !tabelaSelecionada) return "";
+  const acc12m = indexAccumPct || 0;
+  const P1 = calc.parcelaPreSemSeguro + (tabelaSelecionada.antecip_parcelas > 0 ? calc.antecada : 0) + calc.seguroMensal;
+  const Pdemais = calc.parcelaPreSemSeguro + calc.seguroMensal;
+  const contMes = Math.max(1, parcContemplacao);
+  const MAX_ROWS = Math.min(60, prazoVenda);
+
+  let creditoVig = credito;
+  let saldoPos = calc.saldoFinal; // após contemplação
+  let pos = false;
+  const linhas: { mes:number; credito:number; valorParcela:number; reajuste:number; saldo:number; invest:number; evento:string }[] = [];
+
+  for (let m = 1; m <= MAX_ROWS; m++) {
+    if (!pos) {
+      let evento = "-";
+      let reaj = 0;
+      const valorParc = (m === 1 ? P1 : Pdemais);
+      if (m > 1 && (m - 1) % 12 === 0) {
+        const antes = creditoVig;
+        creditoVig = +(creditoVig * (1 + acc12m)).toFixed(2);
+        reaj = +(antes * acc12m).toFixed(2);
+        evento = "Reajuste pré-contemplação";
+      }
+      if (m === contMes) {
+        linhas.push({ mes: m, credito: creditoVig, valorParcela: valorParc, reajuste: reaj, saldo: calc.saldoFinal, invest: valorParc, evento });
+        pos = true;
+        continue;
+      }
+      linhas.push({ mes: m, credito: creditoVig, valorParcela: valorParc, reajuste: reaj, saldo: 0, invest: valorParc, evento });
+    } else {
+      let evento = "-";
+      let reaj = 0;
+      if ((m - 1) % 12 === 0) {
+        const antes = saldoPos;
+        saldoPos = +(saldoPos * (1 + acc12m)).toFixed(2);
+        reaj = +(antes * acc12m).toFixed(2);
+        evento = "Reajuste pós-contemplação";
+      }
+      const valorParc = calc.parcelaEscolhidaSemSeguro + calc.seguroMensal; // exibe com seguro
+      const amort = calc.parcelaEscolhidaSemSeguro;
+      saldoPos = +(Math.max(0, saldoPos - amort)).toFixed(2);
+      linhas.push({ mes: m, credito: 0, valorParcela: valorParc, reajuste: reaj, saldo: saldoPos, invest: valorParc, evento });
+      if (saldoPos <= 0) break;
+    }
+  }
+  const rows = linhas.map(r => `
+    <tr>
+      <td style="padding:6px 8px">${r.mes}</td>
+      <td style="padding:6px 8px">${r.credito ? brMoney(r.credito) : "-"}</td>
+      <td style="padding:6px 8px">${brMoney(r.valorParcela)}</td>
+      <td style="padding:6px 8px">${r.reajuste ? brMoney(r.reajuste) : "-"}</td>
+      <td style="padding:6px 8px">${r.saldo ? brMoney(r.saldo) : "-"}</td>
+      <td style="padding:6px 8px">${r.invest ? brMoney(r.invest) : "-"}</td>
+      <td style="padding:6px 8px">${r.evento}</td>
+    </tr>
+  `).join("");
+
+  return `
+    <div style="margin-top:16px">
+      <div style="text-align:center;font-weight:700;margin-bottom:8px;">Cronograma (valores reajustados visíveis)</div>
+      <table style="width:100%;border-collapse:collapse;border:1px solid #e5e7eb;border-radius:8px;overflow:hidden;font-size:12px">
+        <thead>
+          <tr style="background:#f9fafb">
+            <th style="text-align:left;padding:6px 8px">Parcela</th>
+            <th style="text-align:left;padding:6px 8px">Crédito</th>
+            <th style="text-align:left;padding:6px 8px">Valor Pago</th>
+            <th style="text-align:left;padding:6px 8px">Reajuste</th>
+            <th style="text-align:left;padding:6px 8px">Saldo Devedor</th>
+            <th style="text-align:left;padding:6px 8px">Investimento</th>
+            <th style="text-align:left;padding:6px 8px">Evento</th>
+          </tr>
+        </thead>
+        <tbody>${rows}</tbody>
+      </table>
+    </div>
+  `;
+}
